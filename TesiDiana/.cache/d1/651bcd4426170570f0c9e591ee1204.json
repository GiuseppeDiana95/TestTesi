{"id":"../node_modules/react-mosaic-component/lib/contextTypes.js","dependencies":[{"name":"/home/giuseppe/Scrivania/TesiDiana/node_modules/react-mosaic-component/lib/contextTypes.js.map","includedInParent":true,"mtime":1695993895711},{"name":"/home/giuseppe/Scrivania/TesiDiana/node_modules/react-mosaic-component/src/contextTypes.ts","includedInParent":true,"mtime":1695993898452},{"name":"/home/giuseppe/Scrivania/TesiDiana/package.json","includedInParent":true,"mtime":1698312122672},{"name":"/home/giuseppe/Scrivania/TesiDiana/node_modules/react-mosaic-component/package.json","includedInParent":true,"mtime":1695993894381},{"name":"react","loc":{"line":7,"column":38,"index":316},"parent":"/home/giuseppe/Scrivania/TesiDiana/node_modules/react-mosaic-component/lib/contextTypes.js","resolved":"/home/giuseppe/Scrivania/TesiDiana/node_modules/react/index.js"}],"generated":{"js":"\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MosaicWindowContext = exports.MosaicContext = void 0;\nvar react_1 = __importDefault(require(\"react\"));\nexports.MosaicContext = react_1.default.createContext(undefined);\nexports.MosaicWindowContext = react_1.default.createContext(undefined);\n"},"sourceMaps":{"js":{"version":3,"file":"contextTypes.js","sourceRoot":"","sources":["../src/contextTypes.ts"],"names":[],"mappings":";;;;;;AAAA,gDAA0B;AAyFb,QAAA,aAAa,GAAG,eAAK,CAAC,aAAa,CAA2B,SAAU,CAAC,CAAC;AAC1E,QAAA,mBAAmB,GAAG,eAAK,CAAC,aAAa,CAAsB,SAAU,CAAC,CAAC","sourcesContent":["import React from 'react';\n\nimport { MosaicKey, MosaicNode, MosaicPath, MosaicUpdate } from './types';\n\n/**\n * Mosaic provides functionality on the context for components within\n * Mosaic to affect the view state.\n */\n\n/**\n * Context provided to everything within Mosaic\n */\nexport interface MosaicContext<T extends MosaicKey> {\n  mosaicActions: MosaicRootActions<T>;\n  mosaicId: string;\n}\n\n/**\n * Context provided to everything within a Mosaic Window\n */\nexport interface MosaicWindowContext {\n  mosaicWindowActions: MosaicWindowActions;\n}\n\n/**\n * These actions are used to alter the state of the view tree\n */\nexport interface MosaicRootActions<T extends MosaicKey> {\n  /**\n   * Increases the size of this node and bubbles up the tree\n   * @param path Path to node to expand\n   * @param percentage Every node in the path up to root will be expanded to this percentage\n   */\n  expand: (path: MosaicPath, percentage?: number) => void;\n  /**\n   * Remove the node at `path`\n   * @param path\n   */\n  remove: (path: MosaicPath) => void;\n  /**\n   * Hide the node at `path` but keep it in the DOM. Used in Drag and Drop\n   * @param path\n   */\n  hide: (path: MosaicPath) => void;\n  /**\n   * Replace currentNode at `path` with `node`\n   * @param path\n   * @param node\n   */\n  replaceWith: (path: MosaicPath, node: MosaicNode<T>) => void;\n  /**\n   * Atomically applies all updates to the current tree\n   * @param updates\n   * @param suppressOnRelease (default: false)\n   */\n  updateTree: (updates: MosaicUpdate<T>[], suppressOnRelease?: boolean) => void;\n  /**\n   * Returns the root of this Mosaic instance\n   */\n  getRoot: () => MosaicNode<T> | null;\n}\n\nexport interface MosaicWindowActions {\n  /**\n   * Fails if no `createNode()` is defined\n   * Creates a new node and splits the current node.\n   * The current node becomes the `first` and the new node the `second` of the result.\n   * `direction` is chosen by querying the DOM and splitting along the longer axis\n   */\n  split: (...args: any[]) => Promise<void>;\n  /**\n   * Fails if no `createNode()` is defined\n   * Convenience function to call `createNode()` and replace the current node with it.\n   */\n  replaceWithNew: (...args: any[]) => Promise<void>;\n  /**\n   * Sets the open state for the tray that holds additional controls\n   */\n  setAdditionalControlsOpen: (open: boolean) => void;\n  /**\n   * Returns the path to this window\n   */\n  getPath: () => MosaicPath;\n  /**\n   * Enables connecting a different drag source besides the react-mosaic toolbar\n   */\n  connectDragSource: (connectedElements: React.ReactElement<any>) => React.ReactElement | null;\n}\n\nexport const MosaicContext = React.createContext<MosaicContext<MosaicKey>>(undefined!);\nexport const MosaicWindowContext = React.createContext<MosaicWindowContext>(undefined!);\n"]}},"error":null,"hash":"98c3517c979798404f7d14d1c218e47a","cacheData":{"env":{}}}