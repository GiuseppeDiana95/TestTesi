{"id":"../node_modules/react-mosaic-component/lib/util/mosaicUpdates.js","dependencies":[{"name":"/home/giuseppe/Scrivania/TesiDiana/node_modules/react-mosaic-component/lib/util/mosaicUpdates.js.map","includedInParent":true,"mtime":1695993896460},{"name":"/home/giuseppe/Scrivania/TesiDiana/node_modules/react-mosaic-component/src/util/mosaicUpdates.ts","includedInParent":true,"mtime":1695993899304},{"name":"/home/giuseppe/Scrivania/TesiDiana/package.json","includedInParent":true,"mtime":1698312122672},{"name":"/home/giuseppe/Scrivania/TesiDiana/node_modules/react-mosaic-component/package.json","includedInParent":true,"mtime":1695993894381},{"name":"immutability-helper","loc":{"line":7,"column":52,"index":442},"parent":"/home/giuseppe/Scrivania/TesiDiana/node_modules/react-mosaic-component/lib/util/mosaicUpdates.js","resolved":"/home/giuseppe/Scrivania/TesiDiana/node_modules/immutability-helper/index.js"},{"name":"lodash/drop","loc":{"line":8,"column":37,"index":504},"parent":"/home/giuseppe/Scrivania/TesiDiana/node_modules/react-mosaic-component/lib/util/mosaicUpdates.js","resolved":"/home/giuseppe/Scrivania/TesiDiana/node_modules/lodash/drop.js"},{"name":"lodash/dropRight","loc":{"line":9,"column":42,"index":563},"parent":"/home/giuseppe/Scrivania/TesiDiana/node_modules/react-mosaic-component/lib/util/mosaicUpdates.js","resolved":"/home/giuseppe/Scrivania/TesiDiana/node_modules/lodash/dropRight.js"},{"name":"lodash/isEqual","loc":{"line":10,"column":40,"index":625},"parent":"/home/giuseppe/Scrivania/TesiDiana/node_modules/react-mosaic-component/lib/util/mosaicUpdates.js","resolved":"/home/giuseppe/Scrivania/TesiDiana/node_modules/lodash/isEqual.js"},{"name":"lodash/last","loc":{"line":11,"column":37,"index":682},"parent":"/home/giuseppe/Scrivania/TesiDiana/node_modules/react-mosaic-component/lib/util/mosaicUpdates.js","resolved":"/home/giuseppe/Scrivania/TesiDiana/node_modules/lodash/last.js"},{"name":"lodash/set","loc":{"line":12,"column":36,"index":735},"parent":"/home/giuseppe/Scrivania/TesiDiana/node_modules/react-mosaic-component/lib/util/mosaicUpdates.js","resolved":"/home/giuseppe/Scrivania/TesiDiana/node_modules/lodash/set.js"},{"name":"lodash/take","loc":{"line":13,"column":37,"index":788},"parent":"/home/giuseppe/Scrivania/TesiDiana/node_modules/react-mosaic-component/lib/util/mosaicUpdates.js","resolved":"/home/giuseppe/Scrivania/TesiDiana/node_modules/lodash/take.js"},{"name":"../internalTypes","loc":{"line":14,"column":30,"index":835},"parent":"/home/giuseppe/Scrivania/TesiDiana/node_modules/react-mosaic-component/lib/util/mosaicUpdates.js","resolved":"/home/giuseppe/Scrivania/TesiDiana/node_modules/react-mosaic-component/lib/internalTypes.js"},{"name":"./mosaicUtilities","loc":{"line":15,"column":32,"index":888},"parent":"/home/giuseppe/Scrivania/TesiDiana/node_modules/react-mosaic-component/lib/util/mosaicUpdates.js","resolved":"/home/giuseppe/Scrivania/TesiDiana/node_modules/react-mosaic-component/lib/util/mosaicUtilities.js"}],"generated":{"js":"\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createExpandUpdate = exports.createHideUpdate = exports.createDragToUpdates = exports.createRemoveUpdate = exports.updateTree = exports.buildSpecFromUpdate = void 0;\nvar immutability_helper_1 = __importDefault(require(\"immutability-helper\"));\nvar drop_1 = __importDefault(require(\"lodash/drop\"));\nvar dropRight_1 = __importDefault(require(\"lodash/dropRight\"));\nvar isEqual_1 = __importDefault(require(\"lodash/isEqual\"));\nvar last_1 = __importDefault(require(\"lodash/last\"));\nvar set_1 = __importDefault(require(\"lodash/set\"));\nvar take_1 = __importDefault(require(\"lodash/take\"));\nvar internalTypes_1 = require(\"../internalTypes\");\nvar mosaicUtilities_1 = require(\"./mosaicUtilities\");\n/**\n * Used to prepare `update` for `immutability-helper`\n * @param mosaicUpdate\n * @returns {any}\n */\nfunction buildSpecFromUpdate(mosaicUpdate) {\n    if (mosaicUpdate.path.length > 0) {\n        return set_1.default({}, mosaicUpdate.path, mosaicUpdate.spec);\n    }\n    else {\n        return mosaicUpdate.spec;\n    }\n}\nexports.buildSpecFromUpdate = buildSpecFromUpdate;\n/**\n * Applies `updates` to `root`\n * @param root\n * @param updates\n * @returns {MosaicNode<T>}\n */\nfunction updateTree(root, updates) {\n    var currentNode = root;\n    updates.forEach(function (mUpdate) {\n        currentNode = immutability_helper_1.default(currentNode, buildSpecFromUpdate(mUpdate));\n    });\n    return currentNode;\n}\nexports.updateTree = updateTree;\n/**\n * Creates a `MosaicUpdate<T>` to remove the node at `path` from `root`\n * @param root\n * @param path\n * @returns {{path: T[], spec: {$set: MosaicNode<T>}}}\n */\nfunction createRemoveUpdate(root, path) {\n    var parentPath = dropRight_1.default(path);\n    var nodeToRemove = last_1.default(path);\n    var siblingPath = parentPath.concat(mosaicUtilities_1.getOtherBranch(nodeToRemove));\n    var sibling = mosaicUtilities_1.getAndAssertNodeAtPathExists(root, siblingPath);\n    return {\n        path: parentPath,\n        spec: {\n            $set: sibling,\n        },\n    };\n}\nexports.createRemoveUpdate = createRemoveUpdate;\nfunction isPathPrefixEqual(a, b, length) {\n    return isEqual_1.default(take_1.default(a, length), take_1.default(b, length));\n}\n/**\n * Creates a `MosaicUpdate<T>` to split the _leaf_ at `destinationPath` into a node of it and the node from `sourcePath`\n * placing the node from `sourcePath` in `position`.\n * @param root\n * @param sourcePath\n * @param destinationPath\n * @param position\n * @returns {(MosaicUpdate<T>|{path: MosaicPath, spec: {$set: {first: MosaicNode<T>, second: MosaicNode<T>, direction: MosaicDirection}}})[]}\n */\nfunction createDragToUpdates(root, sourcePath, destinationPath, position) {\n    var destinationNode = mosaicUtilities_1.getAndAssertNodeAtPathExists(root, destinationPath);\n    var updates = [];\n    var destinationIsParentOfSource = isPathPrefixEqual(sourcePath, destinationPath, destinationPath.length);\n    if (destinationIsParentOfSource) {\n        // Must explicitly remove source from the destination node\n        destinationNode = updateTree(destinationNode, [\n            createRemoveUpdate(destinationNode, drop_1.default(sourcePath, destinationPath.length)),\n        ]);\n    }\n    else {\n        // Can remove source normally\n        updates.push(createRemoveUpdate(root, sourcePath));\n        // Have to drop in the correct destination after the source has been removed\n        var removedNodeParentIsInPath = isPathPrefixEqual(sourcePath, destinationPath, sourcePath.length - 1);\n        if (removedNodeParentIsInPath) {\n            destinationPath.splice(sourcePath.length - 1, 1);\n        }\n    }\n    var sourceNode = mosaicUtilities_1.getAndAssertNodeAtPathExists(root, sourcePath);\n    var first;\n    var second;\n    if (position === internalTypes_1.MosaicDropTargetPosition.LEFT || position === internalTypes_1.MosaicDropTargetPosition.TOP) {\n        first = sourceNode;\n        second = destinationNode;\n    }\n    else {\n        first = destinationNode;\n        second = sourceNode;\n    }\n    var direction = 'column';\n    if (position === internalTypes_1.MosaicDropTargetPosition.LEFT || position === internalTypes_1.MosaicDropTargetPosition.RIGHT) {\n        direction = 'row';\n    }\n    updates.push({\n        path: destinationPath,\n        spec: {\n            $set: { first: first, second: second, direction: direction },\n        },\n    });\n    return updates;\n}\nexports.createDragToUpdates = createDragToUpdates;\n/**\n * Sets the splitPercentage to hide the node at `path`\n * @param path\n * @returns {{path: T[], spec: {splitPercentage: {$set: number}}}}\n */\nfunction createHideUpdate(path) {\n    var targetPath = dropRight_1.default(path);\n    var thisBranch = last_1.default(path);\n    var splitPercentage;\n    if (thisBranch === 'first') {\n        splitPercentage = 0;\n    }\n    else {\n        splitPercentage = 100;\n    }\n    return {\n        path: targetPath,\n        spec: {\n            splitPercentage: {\n                $set: splitPercentage,\n            },\n        },\n    };\n}\nexports.createHideUpdate = createHideUpdate;\n/**\n * Sets the splitPercentage of node at `path` and all of its parents to `percentage` in order to expand it\n * @param path\n * @param percentage\n * @returns {{spec: MosaicUpdateSpec<T>, path: Array}}\n */\nfunction createExpandUpdate(path, percentage) {\n    var _a;\n    var spec = {};\n    for (var i = path.length - 1; i >= 0; i--) {\n        var branch = path[i];\n        var splitPercentage = branch === 'first' ? percentage : 100 - percentage;\n        spec = (_a = {\n                splitPercentage: {\n                    $set: splitPercentage,\n                }\n            },\n            _a[branch] = spec,\n            _a);\n    }\n    return {\n        spec: spec,\n        path: [],\n    };\n}\nexports.createExpandUpdate = createExpandUpdate;\n"},"sourceMaps":{"js":{"version":3,"file":"mosaicUpdates.js","sourceRoot":"","sources":["../../src/util/mosaicUpdates.ts"],"names":[],"mappings":"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","sourcesContent":["import update from 'immutability-helper';\nimport drop from 'lodash/drop';\nimport dropRight from 'lodash/dropRight';\nimport isEqual from 'lodash/isEqual';\nimport last from 'lodash/last';\nimport set from 'lodash/set';\nimport take from 'lodash/take';\nimport { MosaicDropTargetPosition } from '../internalTypes';\nimport {\n  MosaicBranch,\n  MosaicDirection,\n  MosaicKey,\n  MosaicNode,\n  MosaicParent,\n  MosaicPath,\n  MosaicUpdate,\n  MosaicUpdateSpec,\n} from '../types';\nimport { getAndAssertNodeAtPathExists, getOtherBranch } from './mosaicUtilities';\n\n// https://github.com/Microsoft/TypeScript/issues/9944\nexport { MosaicParent };\n\n/**\n * Used to prepare `update` for `immutability-helper`\n * @param mosaicUpdate\n * @returns {any}\n */\nexport function buildSpecFromUpdate<T extends MosaicKey>(mosaicUpdate: MosaicUpdate<T>): MosaicUpdateSpec<T> {\n  if (mosaicUpdate.path.length > 0) {\n    return set({}, mosaicUpdate.path, mosaicUpdate.spec);\n  } else {\n    return mosaicUpdate.spec;\n  }\n}\n\n/**\n * Applies `updates` to `root`\n * @param root\n * @param updates\n * @returns {MosaicNode<T>}\n */\nexport function updateTree<T extends MosaicKey>(root: MosaicNode<T>, updates: MosaicUpdate<T>[]) {\n  let currentNode = root;\n  updates.forEach((mUpdate: MosaicUpdate<T>) => {\n    currentNode = update(currentNode as MosaicParent<T>, buildSpecFromUpdate(mUpdate));\n  });\n\n  return currentNode;\n}\n\n/**\n * Creates a `MosaicUpdate<T>` to remove the node at `path` from `root`\n * @param root\n * @param path\n * @returns {{path: T[], spec: {$set: MosaicNode<T>}}}\n */\nexport function createRemoveUpdate<T extends MosaicKey>(root: MosaicNode<T> | null, path: MosaicPath): MosaicUpdate<T> {\n  const parentPath = dropRight(path);\n  const nodeToRemove = last(path);\n  const siblingPath = parentPath.concat(getOtherBranch(nodeToRemove!));\n  const sibling = getAndAssertNodeAtPathExists(root, siblingPath);\n\n  return {\n    path: parentPath,\n    spec: {\n      $set: sibling,\n    },\n  };\n}\n\nfunction isPathPrefixEqual(a: MosaicPath, b: MosaicPath, length: number) {\n  return isEqual(take(a, length), take(b, length));\n}\n\n/**\n * Creates a `MosaicUpdate<T>` to split the _leaf_ at `destinationPath` into a node of it and the node from `sourcePath`\n * placing the node from `sourcePath` in `position`.\n * @param root\n * @param sourcePath\n * @param destinationPath\n * @param position\n * @returns {(MosaicUpdate<T>|{path: MosaicPath, spec: {$set: {first: MosaicNode<T>, second: MosaicNode<T>, direction: MosaicDirection}}})[]}\n */\nexport function createDragToUpdates<T extends MosaicKey>(\n  root: MosaicNode<T>,\n  sourcePath: MosaicPath,\n  destinationPath: MosaicPath,\n  position: MosaicDropTargetPosition,\n): MosaicUpdate<T>[] {\n  let destinationNode = getAndAssertNodeAtPathExists(root, destinationPath);\n  const updates: MosaicUpdate<T>[] = [];\n\n  const destinationIsParentOfSource = isPathPrefixEqual(sourcePath, destinationPath, destinationPath.length);\n  if (destinationIsParentOfSource) {\n    // Must explicitly remove source from the destination node\n    destinationNode = updateTree(destinationNode, [\n      createRemoveUpdate(destinationNode, drop(sourcePath, destinationPath.length)),\n    ]);\n  } else {\n    // Can remove source normally\n    updates.push(createRemoveUpdate(root, sourcePath));\n\n    // Have to drop in the correct destination after the source has been removed\n    const removedNodeParentIsInPath = isPathPrefixEqual(sourcePath, destinationPath, sourcePath.length - 1);\n    if (removedNodeParentIsInPath) {\n      destinationPath.splice(sourcePath.length - 1, 1);\n    }\n  }\n\n  const sourceNode = getAndAssertNodeAtPathExists(root, sourcePath);\n  let first: MosaicNode<T>;\n  let second: MosaicNode<T>;\n  if (position === MosaicDropTargetPosition.LEFT || position === MosaicDropTargetPosition.TOP) {\n    first = sourceNode;\n    second = destinationNode;\n  } else {\n    first = destinationNode;\n    second = sourceNode;\n  }\n\n  let direction: MosaicDirection = 'column';\n  if (position === MosaicDropTargetPosition.LEFT || position === MosaicDropTargetPosition.RIGHT) {\n    direction = 'row';\n  }\n\n  updates.push({\n    path: destinationPath,\n    spec: {\n      $set: { first, second, direction },\n    },\n  });\n\n  return updates;\n}\n\n/**\n * Sets the splitPercentage to hide the node at `path`\n * @param path\n * @returns {{path: T[], spec: {splitPercentage: {$set: number}}}}\n */\nexport function createHideUpdate<T extends MosaicKey>(path: MosaicPath): MosaicUpdate<T> {\n  const targetPath = dropRight(path);\n  const thisBranch = last(path);\n\n  let splitPercentage: number;\n  if (thisBranch === 'first') {\n    splitPercentage = 0;\n  } else {\n    splitPercentage = 100;\n  }\n\n  return {\n    path: targetPath,\n    spec: {\n      splitPercentage: {\n        $set: splitPercentage,\n      },\n    },\n  };\n}\n\n/**\n * Sets the splitPercentage of node at `path` and all of its parents to `percentage` in order to expand it\n * @param path\n * @param percentage\n * @returns {{spec: MosaicUpdateSpec<T>, path: Array}}\n */\nexport function createExpandUpdate<T extends MosaicKey>(path: MosaicPath, percentage: number): MosaicUpdate<T> {\n  let spec: MosaicUpdateSpec<T> = {};\n  for (let i = path.length - 1; i >= 0; i--) {\n    const branch: MosaicBranch = path[i];\n    const splitPercentage = branch === 'first' ? percentage : 100 - percentage;\n    spec = {\n      splitPercentage: {\n        $set: splitPercentage,\n      },\n      [branch]: spec,\n    };\n  }\n\n  return {\n    spec,\n    path: [],\n  };\n}\n"]}},"error":null,"hash":"02f5feb9f4669d639b8e842cafbb72de","cacheData":{"env":{}}}