{"id":"../node_modules/react-mosaic-component/lib/types.js","dependencies":[{"name":"/home/giuseppe/Scrivania/TesiDiana/node_modules/react-mosaic-component/lib/types.js.map","includedInParent":true,"mtime":1695993897480},{"name":"/home/giuseppe/Scrivania/TesiDiana/node_modules/react-mosaic-component/src/types.ts","includedInParent":true,"mtime":1695993899789},{"name":"/home/giuseppe/Scrivania/TesiDiana/package.json","includedInParent":true,"mtime":1698312122672},{"name":"/home/giuseppe/Scrivania/TesiDiana/node_modules/react-mosaic-component/package.json","includedInParent":true,"mtime":1695993894381}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MosaicDragType = void 0;\n/**\n * Used by `react-dnd`\n * @type {{WINDOW: string}}\n */\nexports.MosaicDragType = {\n    WINDOW: 'MosaicWindow',\n};\n"},"sourceMaps":{"js":{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":";;;AAkDA;;;GAGG;AACU,QAAA,cAAc,GAAG;IAC5B,MAAM,EAAE,cAAc;CACvB,CAAC","sourcesContent":["import { Spec } from 'immutability-helper';\n\n/**\n * Valid node types\n * @see React.Key\n */\nexport type MosaicKey = string | number;\n\n/**\n * Base type for the Mosaic binary tree\n */\nexport type MosaicNode<T extends MosaicKey> = MosaicParent<T> | T;\n\n/**\n * Row means each window is side-by-side\n */\nexport type MosaicDirection = 'row' | 'column';\n\nexport interface MosaicParent<T extends MosaicKey> {\n  direction: MosaicDirection;\n  first: MosaicNode<T>;\n  second: MosaicNode<T>;\n  splitPercentage?: number;\n}\n\nexport type MosaicBranch = 'first' | 'second';\nexport type MosaicPath = MosaicBranch[];\n\n/**\n * Used by many utility methods to update the tree.\n * spec will be passed to https://github.com/kolodny/immutability-helper\n */\nexport type MosaicUpdateSpec<T extends MosaicKey> = Spec<MosaicNode<T>>;\n\nexport interface MosaicUpdate<T extends MosaicKey> {\n  path: MosaicPath;\n  spec: MosaicUpdateSpec<T>;\n}\n\n/**\n * Mosaic needs a way to resolve `MosaicKey` into react elements for display.\n * This provides a way to render them.\n */\nexport type TileRenderer<T extends MosaicKey> = (t: T, path: MosaicBranch[]) => JSX.Element;\n\n/**\n * Function that provides a new node to put into the tree\n */\nexport type CreateNode<T extends MosaicKey> = (...args: any[]) => Promise<MosaicNode<T>> | MosaicNode<T>;\n\n/**\n * Used by `react-dnd`\n * @type {{WINDOW: string}}\n */\nexport const MosaicDragType = {\n  WINDOW: 'MosaicWindow',\n};\n\nexport interface EnabledResizeOptions {\n  minimumPaneSizePercentage?: number; // Default: 20\n}\n\nexport type ResizeOptions = 'DISABLED' | EnabledResizeOptions;\n"]}},"error":null,"hash":"921895de93fadca1a4a128ee224d1a3c","cacheData":{"env":{}}}